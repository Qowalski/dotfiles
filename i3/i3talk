#!/bin/python

from subprocess import check_output, call
from json import loads
from argparse import ArgumentParser

class Talk:
    """A class to do some operation with i3."""

    def __init__(self):
        self.tree = loads(check_output(["i3-msg", "-t", "get_tree"]).decode("utf-8"))
        self.focus = None
        self.getFocus(self.tree)

    def toggleBorder(self, pixel=None):
        """Toggles windowborders depending on its floating state."""

        floating = self.focus['floating']
        if floating == "user_on"  or floating == "auto_on":
            call(["i3-msg", "-q", "border", "normal"])
        elif floating == "user_off"  or floating == "auto_off":
            if pixel == None:
                call(["i3-msg", "-q", "border", "pixel"])
            else:
                call(["i3-msg", "-q", "border", "pixel", str(pixel)])

    def getFocus(self, tree):
        """Searches for the focused window in the i3 tree."""

        for node in tree['nodes']:
            if node['focused'] == True:
                self.focus = node
            else:
                self.getFocus(node)

        for node in tree['floating_nodes']:
            if node['focused'] == True:
                self.focus = node
            else:
                self.getFocus(node)

def getArgs():
    """Returns given subcommands."""

    parser = ArgumentParser(prog="i3talk",
                            description="Do some operations with i3")

    parser.add_argument(dest="sub", metavar="command", action="append", nargs="+",
                        help="toggleBorder [pixel]")

    return parser.parse_args()

def isSub(args, arg):
    """Checks if subcommand is a subcommand"""

    try:
        sub = int(args[args.index(arg)+1])
    except (IndexError, ValueError):
        sub = None
    return sub

if __name__ == "__main__":
    args = getArgs().sub[0]
    i3 = Talk()

    # handle commands
    for arg in args:
        if arg in ["toggleBorder"]:
            i3.toggleBorder(isSub(args, arg))

# vim:foldmethod=indent
