#!/usr/bin/env python


import os
import subprocess
import argparse


_NAME = os.path.basename(__file__)
_HOME = os.path.expanduser('~')
_IGNORE = [_NAME, '.stowignore']

if os.path.exists('.stowignore'):
    with open('.stowignore') as stowignore:
        for file in stowignore.readlines():
            _IGNORE.append(file.strip())


def stow(packages, target, stow=False, delete=False):
    if stow and delete:
        option = '-R'
        print('INFO: Restowing:')
    elif stow:
        option = '-S'
        print('INFO: Stowing:')
    elif delete:
        option = '-D'
        print('INFO: Deleting:')

    for package in packages:
        print(f'\t{package}', end='')
        if package not in _IGNORE:
            output = subprocess.Popen(['stow', option, package, '-t', target], stderr=subprocess.PIPE)
            if output.stderr:
                print()
                with output.stderr as err:
                    for line in err.readlines():
                        line = line.decode('utf-8')
                        if 'BUG' not in line:
                            print('\t{}'.format(line.decode('utf-8').strip()))
        else:
            print(': IGNORED')


def get_args():
    parser = argparse.ArgumentParser(add_help=False)

    parser.add_argument(
            '--help',
            '-h',
            action='store_true'
    )
    parser.add_argument(
            '--target',
            '-t',
            default=_HOME,
            metavar='DIR',
    )

    parser.add_argument(
            '--stow',
            '-S',
            nargs='+',
            metavar='PACKAGE',
    )

    parser.add_argument(
            '--delete',
            '-D',
            nargs='+',
            metavar='PACKAGE',
    )

    parser.add_argument(
            '--restow',
            '-R',
            nargs='+',
            metavar='PACKAGE',
    )

    parser.add_argument(
            '--version',
            action='store_true'
    )

    args = parser.parse_args()

    if args.help:
        print(
                f'usage: {_NAME} [option]...\n'
                 '\n'
                 'Small wrapper for GNU\'s \'stow\'\n'
                 '\n'
                 'Without any option it will stow every package inside the current directory\n'
                 'Any file inside .stowignore will be ignored\n'
                 '\n'
                 '-h, --help                        Print this message and exit\n'
                 '-t DIR, --target DIR              Set the target to DIR\n'
                f'                                  default is \'{_HOME}\'\n'
                 '\n'
                 '-S CONFIGs, --stow CONFIGs        Stow CONFIGs\n'
                 '-D CONFIGs, --delete CONFIGs      Unstow CONFIGs\n'
                 '-R CONFIGs, --restore CONFIGs      Restoe CONFIGs\n'
                 '                                  Similar to -D folowed by -S\n'
                 '\n'
                 '--version                         Print version of \'stow\' and exit\n'
                 '                                  Same as \'stow --version\''
        )
        exit(0)

    if args.version:
        subprocess.call(['stow', '--version'])
        exit(0)

    if not os.path.exists(args.target):
        exit('error: target does not exist')

    return args


def main():
    args = get_args()

    if args.delete:
        stow(args.delete, args.target, delete=True)

    if args.stow:
        stow(args.stow, args.target, stow=True)

    if args.restow:
        stow(args.restow, args.target, stow=True, delete=True)

    if not args.stow and not args.delete and not args.restow:
        stow(os.listdir(), args.target, stow=True)


if __name__ == '__main__':
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        print()
        exit(1)
